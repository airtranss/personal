СУПЕРСИЛА №1 - Вложенность
.block{
   font-size: 14px;
   line-height: 20px;
   span{
       color:green;
       }
   }
- - Во вложенных элементах можно переписывать свойства родителя!
- - Также можно применять ">" чтобы описать уровень вложенности:
.block{
	>p{
	   font-weight: 700;
	  }
       }

- - Оператор & - подключает класс родителя
.link {
  font-size: 80px;
  color: green;
  text-decoration: underline;
  &:hover{
	color: red;
	}
  &:before{
	content= '';
	(свойства)
	}
      }
Это можно использовать, если для одного элемента задано два класса (например, .block и .block-big)
.block{
	&.block-big{
		(свойства)
		   }
       }

=======================================
СУПЕРСИЛА №2 - Переменные
- - $(имя переменной):(св-ва);
- - $fz:80px;
- - $color_1: #eee;
- - $color_2: #000;
Задавать вместо обычных значений:
- - font-size: $fz;
Изменяя значение переменной, можно в одно мгновение изменить множество значений свойств. Очень круто для больших проектов.

=======================================
СУПЕРСИЛА №3 - Импорт
Например, стиль обнуления. Мы его не редактируем, и он нам только мешает добираться до нужных стилей.
Создаем файл nullstyle.scss и помещаем в него стили обнуления. Сам файл размещаем рядом с основным файлом scss.
Далее подключаем в основном файле SASS с помощью записи:
- - @import "nullstyle.scss";
И после этого появится такой же файл, только с расширением css. (nullstyle.css) Его можно удалить, т.к. всё собирается в основной css, скомпеллированный из scss.
Также используется, если большой проект и к каждой странице свой css файл.
=======================================
СУПЕРСИЛА №4 - Шаблоны
К примеру, в работе имеется некое количество ссылок, имеющих одинаковые свойства
Создаем шаблон
- - %(название шаблона){
	(св-ва)
	    }
- - %properties{
	(св-ва)
	    }
И применяем к ссылкам внутри их классов с помощью
- - @extend %properties;
*Если надо внести правку в шаблоне для ссылки, то пишем свойство, которое необходимо изменить, прямо после шаблона:
- - @extend %properties;
- - border: 1px solid #e8e8e8;
*
Также можно создавать не через %, а через ".". В таком случае, шаблон будет отображаться в css, даже если не применен ни к одному элементу. Шаблон будет в виде "несуществующего класса".
Подключать также через символ ".":
- - @extend .properties;
Шаблоны указывать перед элементами.
=======================================
СУПЕРСИЛА №5 - Миксины
Шаблоны, но гораздо круче.
- - СОЗДАНИЕ миксина:
- - @mixin (название миксина)(название переменных, через запятую){
		(св-во: название переменной)
                (св-во: название переменной)
	}
- - @mixin properties($fz, $c){
	 font-size: $fz;
	 color: $c;
	}
- - ПОДКЛЮЧЕНИЕ миксина:
	.class {
		@include (название миксина)(значение встроенных свойств)
	}
		.link {
		@include properties(100px,#c8c8c8)
	}
Теперь миксин можно подключить к другому классу и в одно мгновение изменять в нем свойства.

=======================================
СУПЕРСИЛА №6 - Комментирование
Обычный комментарий /* Комментарий /* . Он будет попадать в файл css, что не очень хорошо.
Комментарий в SASS - // Комментарий 3e43 43 t